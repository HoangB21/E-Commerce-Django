from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from django.shortcuts import get_object_or_404
from .models import Book, Category
from .serializers import BookSerializer, CategorySerializer

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer

class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

    def create(self, request, *args, **kwargs):
        print("Received Data:", request.data)  # Debug d·ªØ li·ªáu request

        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        
        print("Errors:", serializer.errors)  # Debug l·ªói
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def update(self, request, *args, **kwargs):
        book = get_object_or_404(Book, pk=kwargs.get("pk"))
        
        # Debug: In d·ªØ li·ªáu request
        print("üì• Nh·∫≠n request c·∫≠p nh·∫≠t s√°ch:")
        print("üîπ D·ªØ li·ªáu:", request.data)
        print("üìÇ File g·ª≠i l√™n:", request.FILES)

        # Chuy·ªÉn request th√†nh dict ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t
        updated_data = request.data.copy()

        # N·∫øu m·ªôt tr∆∞·ªùng kh√¥ng c√≥ trong request, gi·ªØ nguy√™n gi√° tr·ªã c≈©
        for field in ["name", "author", "price", "stock", "category", "publication_date", "description", "image", "service"]:
            if field not in updated_data:
                updated_data[field] = getattr(book, field)

        # Debug: In d·ªØ li·ªáu sau khi x·ª≠ l√Ω
        print("üõ† D·ªØ li·ªáu sau khi x·ª≠ l√Ω:", updated_data)

        # Validate v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu
        serializer = self.get_serializer(book, data=updated_data, partial=True)
        
        if not serializer.is_valid():
            print("‚ùå L·ªói validation:", serializer.errors)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        # C·∫≠p nh·∫≠t s√°ch
        self.perform_update(serializer)

        print("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng, d·ªØ li·ªáu m·ªõi:", serializer.data)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def destroy(self, request, *args, **kwargs):
        book = get_object_or_404(Book, pk=kwargs.get("pk"))

        # Debug: In th√¥ng tin s√°ch c·∫ßn x√≥a
        print(f"üóë X√≥a s√°ch: {book.name} (ID: {book.id})")

        book.delete()
        return Response({"message": "Book deleted successfully"}, status=status.HTTP_204_NO_CONTENT)